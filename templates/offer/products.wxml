<template name="products">
  <view class="product_container{{ list_item.actualStock == 0 ? ' sold-out' : '' }}" wx:for="{{ product_list }}" wx:key="id" wx:for-item="list_item">
    <view class="flex-between flex-align-start product">
      <navigator
        class="flex-start flex-align-start product_left"
        url="{{ _offer_setting.routes.product + '?id=' + list_item._id + '&offer_id=' + offer_id }}{{ _is_pack ? '&type=pack' : '&type=product' }}"
      >
        <view class="product-image">
          <image src="{{ _offer_setting.folders.pack_picture + list_item.illustation.uri }}" mode="aspectFill" lazy-load="true" wx:if="{{ _is_pack && list_item.illustation }}"></image>
          <image src="/assets/images/packDefault.png" mode="aspectFill" lazy-load="true" wx:elif="{{ _is_pack }}"></image>
          <image src="{{ list_item ? _offer_setting.folders.product_picture + list_item.product.mainPicture[_offer_setting.language].uri : '' }}" mode="aspectFill" lazy-load="true" wx:else></image>
        </view>
        <view class="product-info">
          <view class="gilroy_700 ziko-{{ _community }}-pure gradient-text uppercase product-title">{{ _is_pack ? list_item.name[_offer_setting.language] : list_item.product.name[_offer_setting.language] }}</view>
          <!-- Pack Products Detail -->
          <view class="nunito_300 product-detail_container" wx:if="{{ _is_pack }}">{{ list_item.products_info }}</view>
          <!-- End of Pack Products Detail -->

          <!-- Single Products Detail -->
          <view class="nunito_300 product-detail_container" wx:else>
            <text>{{ list_item.product.storageType && list_item.product.storageType != 'none' ? '(' + _t.storage_types[list_item.product.storageType] + ') ' : '' }}</text>
            <text wx:if="{{ list_item.weight && list_item.weightType }}">{{ list_item.quantity ? list_item.quantity + ' x ' + list_item.weight + list_item.weightType : list_item.weight + list_item.weightType }}</text>
            <text wx:elif="{{ list_item.weight }}">{{ list_item.quantity ? list_item.quantity + ' x ' + list_item.weight + _t.units : list_item.weight + _t.units }}</text>
            <text wx:else>{{ list_item.quantity ? list_item.quantity > 1 ? list_item.quantity +  _t.items_unit : list_item.quantity + _t.item_unit : '' }}</text>
          </view>
          <!-- End of Single Products Detail -->

          <!-- Available Amount Left -->
          <view class="nunito_300 product-available">
            <text wx:if="{{ list_item.actualStock == 0 }}">{{ _t.products_left.fst + list_item.actualStock + _t.products_left.snd }}</text>
            <text wx:elif="{{ list_item.actualStock >= 100 }}">{{ _t.available.fst + list_item.actualStock + _t.available.snd }}</text>
            <text wx:else>{{ _t.only_left.fst + list_item.actualStock + _t.only_left.snd }}</text>
          </view>
          <!-- End of Available Amount Left -->

          <!-- Price -->
          <view class="gilroy_800 product-price_container">
            <text class="product-price" wx:if="{{ cart.products[list_item._id].price && cart.products[list_item._id].price != list_item.price }}">¥{{ cart.products[list_item._id].price }}</text>
            <text class="product-price" wx:elif="{{ list_item.formerPrice && list_item.formerPrice != list_item.price }}">¥{{ list_item.price }}</text>
            <text class="product-price">¥{{ list_item.formerPrice ? list_item.formerPrice : list_item.price }}</text>
          </view>
          <!-- End of Price -->

          <!-- Next price and lottery draw -->
          <!-- CSS TODO -->
          <view wx:if="{{ _offer_setting.type == 'bourse' }}" class="nunito_500 product-next-info_container">
            <view class="product-next-info red">
              <view class="product-next-info-message capitalize">
                {{ _t.next_price_in }} {{ next_lottery.remaining }}
                <text wx:if="{{ draw.conditionType === 'number_of_order'}}">{{ _t.orders }}</text>
                <text wx:else>{{ _t.offer_special_names.items_sold }}</text>:
              </view>
              <view class="nunito_700 product-next-info-target">
                ¥{{ _bourse_info.nextPrice }}
              </view>
            </view>
            <view class="product-next-info green">
              <view class="product-next-info-message capitalize">
                {{ _t.next_lottery_in }} {{ next_lottery.remaining }}
                <text wx:if="{{ draw.conditionType === 'number_of_order'}}">{{ _t.orders }}</text>
                <text wx:else>{{ _t.offer_special_names.items_sold }}</text>:
              </view>
              <view class="nunito_700 product-next-info-target uppercase">
                {{ _t.draw }} {{ next_lottery.num }}
              </view>
            </view>
          </view>
          <!-- End of Next price and lottery draw -->
        </view>
      </navigator>
      <quantity
        class="flex-start product-quantity"
        amount="{{ cart.products[list_item._id] ? cart.products[list_item._id].amount : 0 }}"
        community="{{ _community }}"
        product_id="{{ list_item._id }}"
        stock="{{ list_item.actualStock }}"
        bind:changeAmount="changeAmount"
        data-idx="{{ index }}"
        data-price="{{ list_item.price }}"
      ></quantity>
    </view>

    <!-- Cellar Target Tags -->
    <!-- Freefall Targets -->
    <view class="product-targets" wx:if="{{ _offer_setting.type === 'free_fall' && list_item.freeFall && list_item.freeFall.quantityTrigger }}">
      <view class="product-target_container">
        -¥{{ list_item.freeFall.dropAmount }}{{ _t.freefall.fst }}{{ list_item.freeFall.quantityTrigger }}{{ list_item.freeFall.quantityTrigger > 1 ? _t.items_unit : _t.item_unit }}{{ _t.freefall.snd }}
      </view>
    </view>
    <!-- Multiple Targets -->
    <view class="product-targets" wx:elif="{{ _offer_setting.type === 'multiple_items' && list_item.multipleItem.length > 0 }}">
      <view class="product-target_container" wx:for="{{ list_item.multipleItem }}" wx:key="*this" wx:for-item="multiple">
        <text>x{{ multiple.quantity }}{{ _t.multiple.btl }}{{ multiple.unitPrice }}{{ _t.multiple.each }}</text>
      </view>
    </view>
    <!-- End of Cellar Target Tags -->
  </view>
</template>